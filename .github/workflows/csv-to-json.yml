name: CSV → JSON (for GitHub Pages)

on:
  push:
    paths:
      - '**/statuses.csv'        # CSV 變更就觸發
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'       # 每 30 分跑一次（可改）

permissions:
  contents: write                # 允許推回 repo

env:
  PAGES_BRANCH: main             # ← 如果你的 Pages 用的是 gh-pages，就改成 gh-pages

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Pages branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PAGES_BRANCH }}   # 保證是在 Pages 分支上操作
          fetch-depth: 0

      - name: Locate CSV path
        id: findcsv
        run: |
          set -euo pipefail
          CSV_PATH="$(git ls-files | grep -E '(^|/)statuses\.csv$' || true)"
          if [ -z "$CSV_PATH" ]; then
            echo "❌ 找不到 statuses.csv（請確認檔名與路徑）"
            exit 1
          fi
          echo "csv=$CSV_PATH" >> "$GITHUB_OUTPUT"
          echo "✅ 找到 CSV：$CSV_PATH"

      - name: Convert CSV → JSON (tolerant headers)
        env:
          CSV_PATH: ${{ steps.findcsv.outputs.csv }}
        run: |
          set -euo pipefail
          python3 - << 'PY'
          import csv, json, os, datetime, io
          CSV_PATH = os.environ['CSV_PATH']
          ALLOWED = {'未收到','已收件','二層核章','已完成核章送出'}

          def norm(s):
              if s is None: return ''
              s = str(s)
              for bad in ['\ufeff','\u00A0','\u3000','\u200b']:
                  s = s.replace(bad,'')
              return s.strip().lower()

          SYN_ID     = {'id','單號','資料單號','送件單號','案件編號','票號','編號','流水號','ticket','case id','case_id'}
          SYN_STATUS = {'status','狀態','目前狀態','進度','處理狀態','stage'}
          SYN_NOTE   = {'note','備註','備註說明','說明','comment','remark','備註欄'}

          # 讀檔：容錯多種編碼
          last_err = None
          for enc in ['utf-8-sig','utf-8','cp950','big5']:
              try:
                  text = open(CSV_PATH,'r',encoding=enc, newline='').read()
                  break
              except Exception as e:
                  last_err = e
          else:
              raise last_err

          # 猜分隔符（逗號/分號/Tab）
          try:
              sample = '\n'.join(text.splitlines()[:3])
              dialect = csv.Sniffer().sniff(sample, delimiters=',;\t')
          except Exception:
              dialect = None

          reader = csv.reader(io.StringIO(text), dialect) if dialect else csv.reader(io.StringIO(text))
          rows = [[c if c is not None else '' for c in row] for row in reader]
          if not rows:
              raise SystemExit("CSV 內無資料")

          raw_headers = rows[0]
          headers = [norm(h) for h in raw_headers]
          print("👉 讀到的欄名（正規化後）：", headers)

          def find_idx(syns):
              for i,h in enumerate(headers):
                  if h in syns:
                      return i
              return -1

          i_id   = find_idx(SYN_ID)
          i_st   = find_idx(SYN_STATUS)
          i_note = find_idx(SYN_NOTE)

          if min(i_id, i_st) < 0:
              raise SystemExit(f"CSV 必須包含 id/status 或 單號/狀態，目前第一列為：{raw_headers}")

          def get(r,i):
              return (r[i].strip() if i>=0 and i<len(r) and r[i] is not None else '')

          items = []
          for r in rows[1:]:
              if not any(str(x).strip() for x in r):  # 跳過空列
                  continue
              idv = get(r,i_id).upper()
              if not idv:
                  continue
              st = get(r,i_st)
              if st not in ALLOWED:
                  st = '未收到'
              note = get(r,i_note) if i_note >= 0 else ''
              items.append({'id': idv, 'status': st, 'note': note})

          items.sort(key=lambda x: x['id'])
          data = {
              'last_updated': datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=8))).isoformat(),
              'items': items
          }
          with open('statuses.json','w',encoding='utf-8', newline='\n') as out:
              json.dump(data, out, ensure_ascii=False, indent=2)
              out.write('\n')
          PY

      - name: Preview JSON
        run: |
          echo "----- statuses.json (preview) -----"
          head -n 60 statuses.json || true
          echo "----- end preview -----"

      - name: Commit & push if changed
        run: |
          set -euo pipefail
          git pull --rebase --autostash || true
          if git status --porcelain statuses.json | grep -q .; then
            git config user.name  "github-actions"
            git config user.email "actions@github.com"
            git add statuses.json
            git commit -m "chore: update statuses.json from CSV"
            git push
            echo "✅ 已更新並推送 statuses.json 到 ${{ env.PAGES_BRANCH }}"
          else
            echo "ℹ️ 無變更，略過提交"
          fi
