name: CSV → JSON (statuses)

on:
  push:
    paths:
      - '**/statuses.csv'     # 只要任一資料夾的 statuses.csv 有變動就觸發
  workflow_dispatch:          # 允許手動執行
  schedule:
    - cron: '0 * * * *'       # 每小時跑一次（可改）

permissions:
  contents: write             # 允許推回 repo（很多人卡在這裡！）

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0      # 需要比較差異，保留歷史

      - name: Locate CSV path
        id: findcsv
        shell: bash
        run: |
          set -euo pipefail
          CSV_PATH="$(git ls-files | grep -E '(^|/)statuses\.csv$' || true)"
          if [ -z "$CSV_PATH" ]; then
            echo "❌ 找不到 statuses.csv，請確認檔案名稱與路徑"
            exit 1
          fi
          echo "csv=$CSV_PATH" >> "$GITHUB_OUTPUT"
          echo "✅ 找到 CSV：$CSV_PATH"

      - name: Convert CSV → JSON
        env:
          CSV_PATH: ${{ steps.findcsv.outputs.csv }}
        run: |
          set -euo pipefail
          python3 - << 'PY'
          import csv, json, sys, os, datetime

          CSV_PATH = os.environ['CSV_PATH']
          ALLOWED = {'尚未收到','已收件','待二層核章','已完成核章送出'}

          # 盡量容錯不同編碼（Excel/Big5…）
          encodings = ['utf-8-sig','utf-8','cp950','big5']
          last_err = None
          for enc in encodings:
              try:
                  with open(CSV_PATH, 'r', encoding=enc, newline='') as f:
                      text = f.read()
                  break
              except Exception as e:
                  last_err = e
          else:
              raise last_err

          # 以 DictReader 讀，欄名大小寫與空白容錯
          import io
          f = io.StringIO(text)
          reader = csv.reader(f)
          rows = list(reader)
          if not rows:
              raise SystemExit("CSV 內無資料")

          headers = [h.strip().lower() for h in rows[0]]
          def idx(name):
              return headers.index(name) if name in headers else -1

          i_id = idx('id'); i_st = idx('status'); i_note = idx('note')
          if min(i_id, i_st) < 0:
              raise SystemExit("CSV 必須包含欄位：id, status（note 可省略）")

          items = []
          for r in rows[1:]:
              if not any(r):  # 跳過空列
                  continue
              get = lambda i: (r[i].strip() if i>=0 and i<len(r) and r[i] is not None else '')
              idv = get(i_id).upper()
              if not idv:     # 沒有 id 就跳過
                  continue
              st  = get(i_st)
              if st not in ALLOWED:
                  st = '未收到'
              note = get(i_note) if i_note >= 0 else ''
              items.append({'id': idv, 'status': st, 'note': note})

          # 固定排序避免每次 diff 不一樣
          items.sort(key=lambda x: x['id'])

          data = {
              'last_updated': datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=8))).isoformat(),
              'items': items
          }

          with open('statuses.json', 'w', encoding='utf-8', newline='\n') as out:
              json.dump(data, out, ensure_ascii=False, indent=2)
              out.write('\n')  # 保證最後有換行，避免假 diff
          PY

      - name: Show generated JSON
        run: |
          echo "----- statuses.json (preview) -----"
          head -n 50 statuses.json || true
          echo "----- end preview -----"

      - name: Create Pull Request if changed
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: update statuses.json from CSV"
          branch: chore/update-statuses-json
          title: "Update statuses.json from CSV"
          body: "Auto-generated by GitHub Actions."
          add-paths: |
            statuses.json
